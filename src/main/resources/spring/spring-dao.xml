<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--1.配置数据库相关参数properties的属性：${url} 在resource下创建数据库配置文件jdbc.properties&ndash;&gt;-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--创建数据源1，连接SqlServer数据库db1 -->
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters
         配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙-->
        <property name="filters" value="stat,wall" />
        <!--<property name="filters" value="stat,wall,log4j" />-->
        <!--<property name="filters" value="stat" />-->
    </bean>
    <!--创建数据源2，连接MySql数据库db2 -->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClassName" value="${jdbc.mysqlDriver}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.mysqlUrl}" />
        <property name="username" value="${jdbc.mysqlUsername}" />
        <property name="password" value="${jdbc.mysqlPassword}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters
         配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙-->
        <property name="filters" value="stat,wall" />
        <!--<property name="filters" value="stat,wall,log4j" />-->
        <!--<property name="filters" value="stat" />-->
     </bean>

<!--****************************************************** 使用 druid 配置SQLServer start ******************************************************-->

    <bean id="dataSource" class="com.wnf.datasource.DynamicDataSource">
             <property name="targetDataSources">
                 <map key-type="java.lang.String">
                     <!-- 指定lookupKey和与之对应的数据源 -->
                     <entry key="dataSource1" value-ref="dataSource1"></entry>
                     <entry key="dataSource2" value-ref="dataSource2"></entry>
                 </map>
             </property>
             <!-- 这里可以指定默认的数据源 -->
             <property name="defaultTargetDataSource" ref="dataSource2" />
    </bean>
<!--****************************************************** 使用 druid 配置SQLServer end  ******************************************************-->

    <!--约定大于配置-->
    <!--３.配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--往下才是mybatis和spring真正整合的配置-->
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包,使用别名,多个时用;隔开-->
        <property name="typeAliasesPackage" value="com.wnf.entity"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--４:配置扫描Dao接口包,动态实现DAO接口,注入到spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入SqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口-->
        <property name="basePackage" value="com.wnf.dao"/>
    </bean>

</beans>
